module top (
  // I/O ports
  input  logic hz2m, hz100, reset,
  input  logic [20:0] pb,
  /* verilator lint_off UNOPTFLAT */
  output logic [7:0] left, right,
         ss7, ss6, ss5, ss4, ss3, ss2, ss1, ss0,
  output logic red, green, blue,

  // UART ports
  output logic [7:0] txdata,
  input  logic [7:0] rxdata,
  output logic txclk, rxclk,
  input  logic txready, rxready
);
  // Your code goes here...
  logic strobe;
  logic [4:0] keycode;
  scankey a1 ( .clk(hz2m), .rst(reset), .in(pb[19:0]), .out(keycode), .strobe(strobe));
  
  typedef enum logic [1:0] { EDIT=2'd0, PLAY=2'd1, RAW=2'd2}  mode_t;
  mode_t mode;
  controller a2 ( .clk(strobe), .rst(reset), .set_edit(pb[19]), .set_play(pb[18]), .set_raw(pb[16]), .mode(mode));
  logic srst;
  always_comb begin
    if (mode == EDIT) begin
      blue = 1;
      srst = 0;
    end
    else begin
      blue = 0;
      srst = 1;
    end
    if (mode == PLAY)
      green = 1;
    else
      green = 0;
    if (mode == RAW)
      red = 1;
    else begin
      red = 0;
      srst = 0;
    end
  end
  
  logic hz2;
  clkdiv #(20) p1 ( .clk(hz2m), .rst(reset), .lim(20'd499999), .hzX(hz2)); // how to div
  // assign left[0] = hz2;
  
  logic [7:0] edit_seq_out1;
  logic [7:0] edit_seq_out2;
  logic [7:0] edit_seq_out;
  
  logic play_right;
  assign play_right = (mode == PLAY);
  
  // ????
  sequencer sc1 (.clk(strobe), .rst(reset), .srst(mode != EDIT), .go_left(pb[11]), .go_right(pb[8]), .seq_out(edit_seq_out1));
  sequencer sc2 (.clk(hz2), .rst(reset), .srst(mode != PLAY), .go_left(0), .go_right(play_right), .seq_out(edit_seq_out2));
  
  always_comb begin
    if (mode == EDIT)
      edit_seq_out = edit_seq_out1;
    else if (mode == PLAY)
      edit_seq_out = edit_seq_out2;
    else
      edit_seq_out = 0;
  end
  // ?????
  
  assign {left[7], left[5], left[3], left[1], right[7], right[5], right[3], right[1]} = edit_seq_out;
  
  logic [2:0] ring;
  prienc8to3 s2 ( .in(edit_seq_out), .out(ring));

  logic [3:0] edit_play_smpl[7:0];;
  sequence_editor s3 ( .clk(strobe), .rst(reset), .mode(mode), .set_time_idx(ring), .tgl_play_smpl(pb[3:0]), .seq_smpl_1(edit_play_smpl[0]), .seq_smpl_2(edit_play_smpl[1]), .seq_smpl_3(edit_play_smpl[2]), .seq_smpl_4(edit_play_smpl[3]), .seq_smpl_5(edit_play_smpl[4]), .seq_smpl_6(edit_play_smpl[5]), .seq_smpl_7(edit_play_smpl[6]), .seq_smpl_8(edit_play_smpl[7]));
  
  logic [7:0] ssd1;
  assign ssd1 = 8'd0;
  
  assign {ss7[5],ss7[1],ss7[4],ss7[2]} = edit_play_smpl[7];
  assign {ss6[5],ss6[1],ss6[4],ss6[2]} = edit_play_smpl[6];
  assign {ss5[5],ss5[1],ss5[4],ss5[2]} = edit_play_smpl[5];
  assign {ss4[5],ss4[1],ss4[4],ss4[2]} = edit_play_smpl[4];
  assign {ss3[5],ss3[1],ss3[4],ss3[2]} = edit_play_smpl[3];
  assign {ss2[5],ss2[1],ss2[4],ss2[2]} = edit_play_smpl[2];
  assign {ss1[5],ss1[1],ss1[4],ss1[2]} = edit_play_smpl[1];
  assign {ss0[5],ss0[1],ss0[4],ss0[2]} = edit_play_smpl[0];
  
  
  logic [3:0] raw_play_smpl;

  assign raw_play_smpl[0] = pb[0];
  assign raw_play_smpl[1] = pb[1];
  assign raw_play_smpl[2] = pb[2];
  assign raw_play_smpl[3] = pb[3];

  logic [3:0] play_smpl;

  always_ff @ (posedge reset, posedge hz2m) begin
    if (reset)
      play_smpl <= 4'd0;
    else begin
      if (mode == EDIT)
        play_smpl <= 4'd0;
      else if (mode == PLAY)
        play_smpl <= ((enable_ctr <= 900000) ? edit_play_smpl[ring] : 4'b0) | raw_play_smpl;
      else
        play_smpl <= raw_play_smpl;
    end

  end

  
  logic prev_bpm_clk; 
  logic [31:0] enable_ctr;

  always_ff @(posedge hz2m, posedge reset) begin
    if (reset) begin
        prev_bpm_clk <= 0;
        enable_ctr <= 0;

    end
    // otherwise, if we're in PLAY mode
    else if (mode == PLAY) begin
        // if we're on a rising edge of bpm_clk, indicating 
        // the beginning of the beat, reset the counter.
        if (~prev_bpm_clk && hz2) begin // bpm_clk???
        enable_ctr <= 0;
        prev_bpm_clk <= 1;
        end
        // if we're on a falling edge of bpm_clk, indicating 
        // the middle of the beat, set the counter to half its value
        // to correct for drift.
        else if (prev_bpm_clk && ~hz2) begin
            enable_ctr <= 499999;
            prev_bpm_clk <= 0;
        end
        // otherwise count to 1 million, and reset to 0 when that value is reached.
        else begin
            enable_ctr <= (enable_ctr == 999999) ? 0 : enable_ctr + 1;
        end
    end
    // reset the counter so we start on time again.
    else begin
        prev_bpm_clk <= 0;
        enable_ctr <= 0;
    end
  end




  logic sample_clk;
  clkdiv #(8) sc3 ( .clk(hz2m), .rst(reset), .lim(8'd124), .hzX(sample_clk)); // div??

  logic [7:0] sample_data [3:0];
  sample #(
    .SAMPLE_FILE("../audio/kick.mem"),
    .SAMPLE_LEN(4000)
  ) sample_kick ( .clk(sample_clk), .rst(reset), .enable(play_smpl[3]), .out(sample_data[0]));

    sample #(
    .SAMPLE_FILE("../audio/clap.mem"),
    .SAMPLE_LEN(4000)
  ) sample_clap ( .clk(sample_clk), .rst(reset), .enable(play_smpl[2]), .out(sample_data[1]));

    sample #(
    .SAMPLE_FILE("../audio/hihat.mem"),
    .SAMPLE_LEN(4000)
  ) sample_hihat ( .clk(sample_clk), .rst(reset), .enable(play_smpl[1]), .out(sample_data[2]));

    sample #(
    .SAMPLE_FILE("../audio/snare.mem"),
    .SAMPLE_LEN(4000)
  ) sample_snare ( .clk(sample_clk), .rst(reset), .enable(play_smpl[0]), .out(sample_data[3]));

  logic [7:0] sum1;
  logic [7:0] sum2;
  logic [7:0] sum3;

  always_comb begin


   sum1 = sample_data[0] + sample_data[1];
   sum2 = sample_data[2] + sample_data[3];


   if (sum1[7] == 0 && sample_data[0][7] == 1 && sample_data[1][7] == 1) // sample add both or one??
     sum1 = -128;
   else if (sum1[7] == 1 && sample_data[0][7] == 0 && sample_data[1][7] == 0)
     sum1 = 127;
  
   if (sum2[7] == 0 && sample_data[2][7] == 1 && sample_data[3][7] == 1) // sample add both or one??
     sum2 = -128;
   else if (sum2[7] == 1 && sample_data[2][7] == 0 && sample_data[3][7] == 0)
     sum2 = 127;


   sum3 = sum1 + sum2;
   if (sum3[7] == 0 && sum1[7] == 1 && sum2[7] == 1) // sample add both or one??
     sum3 = -128;
   else if (sum3[7] == 1 && sum1[7] == 0 && sum2[7] == 0)
     sum3 = 127;

 end


  logic [7:0] duty_cycle;
  assign duty_cycle = (sum3 ^ 8'd128) >> 2;

  pwm #(64) pwm1 ( .clk(hz2m), .rst(reset), .enable(1), .duty_cycle(duty_cycle[5:0]), .counter(), .pwm_out(right[0])); // sample shift??

  
endmodule