module sequencer (input logic clk, rst, srst, go_left, go_right,
    	output logic [7:0] seq_out);
 
  logic [7:0] next_Q;
  logic [7:0] Q;
 
  always_comb begin
	if (srst) begin
  	next_Q = 8'h80;
	end
	else begin
  	if (go_left)
    	next_Q = {Q[6:0], Q[7]};
  	else
    	if (go_right)
      	next_Q = {Q[0], Q[7:1]};
    	else
      	next_Q = Q;
	end
  end
 
  always_ff @ (posedge clk, posedge rst) begin
	if (rst)
  	Q <= 8'h80;
	else
  	Q <= next_Q;
  end
 
  assign seq_out = Q;
 
endmodule